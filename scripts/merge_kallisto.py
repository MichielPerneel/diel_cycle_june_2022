#!/usr/bin/python3
# coding=utf-8
"""
Author: MichielP.
"""

import pandas as pd
import os
import argparse

def main():
    '''
    A function that combines reads from all samples that were quantified against the assembly using kallisto.
    Every sample yielded an abundance.tsv and abundance.h5 file in an output folder.
    Normally, all these sample output folders are together in a folder that is the input for this function.
    '''
    # Setup the command line arguments...
    parser = argparse.ArgumentParser(description=' Parse kallisto output', prog='Merger')
    parser.add_argument('--input_directory', '-i', required=True,
                        help=("Specify kallisto output folder containing processed samples"))
    parser.add_argument('--output', '-o', required=True, 
                        help=("The output directory that contains the combined files for all samples"
                        "This script combines the types of information generated by kallisto into a counts and tpm file"))
    args = parser.parse_args()
    # Defining variables from the arguments.
    tsvlist = os.listdir(args.input_directory)
    if not os.path.exists(args.output):
        os.makedirs(args.output)
    out_tpm = os.path.join(args.output, ("tpm.csv"))
    out_count = os.path.join(args.output, ("count.csv"))
    print(tsvlist)
    # Create csv with TPM values
    for f in range(0,len(tsvlist)):
        tsv = pd.read_csv(os.path.join(args.input_directory, tsvlist[f], 'abundance.tsv'), sep = '\t')
        tpm = tsv[['target_id', 'tpm']]
        tpm.columns = ['target_id', tsvlist[f]]
        if f == 0:
            data_tpm = pd.DataFrame(tpm.set_index('target_id'))
        else:
            data_tpm = data_tpm.join(tpm.set_index('target_id'), how='inner')     
    # Create csv with counts values
    for f in range(0,len(tsvlist)):
        tsv = pd.read_csv(os.path.join(args.input_directory, tsvlist[f], 'abundance.tsv'), sep = '\t')
        counts = tsv[['target_id', 'est_counts']]
        counts.columns = ['target_id', tsvlist[f]]
        if f == 0:
            data_counts = pd.DataFrame(counts.set_index('target_id'))
        else:
            data_counts = data_counts.join(counts.set_index('target_id'), how='inner')
    # Write output
    data_tpm.reset_index().to_csv(out_tpm, index = False)
    data_counts.reset_index().to_csv(out_count, index=False)

if __name__ == "__main__":
    main()